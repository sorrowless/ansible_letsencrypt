---
- name: LE | Pre-check | Check for challenge type
  fail:
    msg: "Webroot must be specified"
  when: le_challenge == "webroot" and acme_sh_webroot_path == ""

- name: LE | Pre-installation | Set hosts list fact
  set_fact:
    le_domain_names: ["{{ le_hostname }}"]
  when: le_domain_names | length == 0

- name: LE | Pre-installation | Convert domains list to appropriate format
  set_fact:
    # To understand this, look at https://medium.com/@george.shuklin/data-manipulation-in-ansible-bab8eb7d7f93
    le_domains: '{{ le_domain_names | map("regex_replace", "^(.*)$", " -d \1") | list | join(" ") | safe }}'

- name: LE | Pre-installation | Show resulting domains line
  debug:
    msg: "{{ le_domains }}"

- name: LE | Pre-installation | Create webroot directory
  file:
    state: directory
    path: "{{ acme_sh_webroot_path }}"
  when: le_challenge == "webroot"

- name: LE | Pre-installation | Create directory for certificates
  file:
    path: "/etc/ssl_certs/{{ le_domain_names[0] }}"
    state: directory

- name: LE | Installation | Install prerequisites
  package:
    name: "{{ item }}"
    state: latest
  with_items:
    - git
    - curl
    - socat

- name: LE | Installation | Checkout acme.sh repo
  git:
    repo: https://github.com/Neilpang/acme.sh.git
    dest: /root/acme.sh

- name: LE | Installation | Install acme.sh to the system
  shell: ./acme.sh --install
  args:
    chdir: /root/acme.sh

- name: LE | Installation | Create webroot directory
  file:
    state: directory
    path: "{{ acme_sh_webroot_path }}"
  when: le_challenge == "webroot"

- name: LE | Certificate Issue | Create new certificate for given domains with webroot
  shell: ./acme.sh --issue {{ le_domains }} -w {{ acre_sh_webroot_path }} --key-file /etc/ssl_certs/{{ le_domain_names[0] }}/private.pem --fullchain-file /etc/ssl_certs/{{ le_domain_names[0] }}/fullchain.pem
  args:
    chdir: /root/acme.sh
  when: le_challenge == "webroot"

- name: LE | Certificate Issue | Create new certificate for given domains with nginx
  shell: ./acme.sh --issue --{{ le_challenge }} {{ le_domains }} --key-file /etc/ssl_certs/{{ le_domain_names[0] }}/private.pem --fullchain-file /etc/ssl_certs/{{ le_domain_names[0] }}/fullchain.pem
  args:
    chdir: /root/acme.sh
  when: le_challenge == "nginx"

- name: LE | Certificate Issue | Create new certificate for given domains with stadalone
  shell: ./acme.sh --issue --{{ le_challenge }} {{ le_domains }} --key-file /etc/ssl_certs/{{ le_domain_names[0] }}/private.pem --fullchain-file /etc/ssl_certs/{{ le_domain_names[0] }}/fullchain.pem
  args:
    chdir: /root/acme.sh
  when: le_challenge == "standalone" and le_stop_service == false
  register: ch_ex
  failed_when: False

- name: LE | Certificate Issue | Create new certificate for given domains with standalone and pre-hooks
  shell: ./acme.sh --issue --{{ le_challenge }} {{ le_domains }} --key-file /etc/ssl_certs/{{ le_domain_names[0] }}/private.pem --fullchain-file /etc/ssl_certs/{{ le_domain_names[0] }}/fullchain.pem --pre-hook "systemctl stop {{ le_stop_service }}" --post-hook "systemctl start {{ le_stop_service }}"
  args:
    chdir: /root/acme.sh
  when: le_challenge == "standalone" and le_stop_service != false
  register: ch_ex
  failed_when: False

- name: LE | Certificate Issue | Create new certificate for given domains with dns
  shell: ./acme.sh --issue --dns {{ acme_sh_dns_type }} {{ le_domains }} --key-file /etc/ssl_certs/{{ le_domain_names[0] }}/private.pem --fullchain-file /etc/ssl_certs/{{ le_domain_names[0] }}/fullchain.pem
  args:
    chdir: /root/acme.sh
  environment: "{{ acme_sh_dns_vars }}"
  when: le_challenge == "dns"
  register: ch_ex
  failed_when: False

- name: LE | Postcheck | Ensure certs placement
  stat:
    path: /etc/ssl_certs/{{ le_domain_names[0] }}/private.pem
  register: private_key

- name: LE | Postcheck | Forcibly place keypair to target dir
  file:
    src: item["src"]
    dest: item["dest"]
    state: link
  with_items:
    - { src: "/root/.acme.sh/{{ le_domain_names[0] }}/{{ le_domain_names[0] }}.cer",
        dest: "/etc/ssl_certs/{{ le_domain_names[0] }}/private.pem" }
    - { src: "/root/.acme.sh/{{ le_domain_names[0] }}/fullchain.cer",
        dest: "/etc/ssl_certs/{{ le_domain_names[0] }}/fullchain.pem" }
  when: not private_key.stat.exists

- name: Fail if got real error on cert issuing time
  fail:
    msg: "Got an error while issue certificate"
  when: ch_ex is defined and ch_ex.rc is defined and ch_ex.rc != 0 and not 'Domains not changed' in ch_ex.stdout
